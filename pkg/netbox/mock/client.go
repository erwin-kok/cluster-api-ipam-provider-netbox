// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erwin-kok/cluster-api-ipam-provider-netbox/pkg/netbox (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=mock/client.go -package=nbmock . Client
//

// Package nbmock is a generated GoMock package.
package nbmock

import (
	context "context"
	reflect "reflect"

	netbox "github.com/erwin-kok/cluster-api-ipam-provider-netbox/pkg/netbox"
	ipaddr "github.com/seancfoley/ipaddress-go/ipaddr"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GatherStatistics mocks base method.
func (m *MockClient) GatherStatistics(arg0 context.Context, arg1 []*netbox.NetboxIPPool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GatherStatistics", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GatherStatistics indicates an expected call of GatherStatistics.
func (mr *MockClientMockRecorder) GatherStatistics(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatherStatistics", reflect.TypeOf((*MockClient)(nil).GatherStatistics), arg0, arg1)
}

// GetIPRange mocks base method.
func (m *MockClient) GetIPRange(arg0 context.Context, arg1, arg2 string) (*netbox.NetboxIPPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPRange", arg0, arg1, arg2)
	ret0, _ := ret[0].(*netbox.NetboxIPPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPRange indicates an expected call of GetIPRange.
func (mr *MockClientMockRecorder) GetIPRange(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPRange", reflect.TypeOf((*MockClient)(nil).GetIPRange), arg0, arg1, arg2)
}

// GetPrefix mocks base method.
func (m *MockClient) GetPrefix(arg0 context.Context, arg1, arg2 string) (*netbox.NetboxIPPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrefix", arg0, arg1, arg2)
	ret0, _ := ret[0].(*netbox.NetboxIPPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrefix indicates an expected call of GetPrefix.
func (mr *MockClientMockRecorder) GetPrefix(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrefix", reflect.TypeOf((*MockClient)(nil).GetPrefix), arg0, arg1, arg2)
}

// NextAvailableIPRangeAddress mocks base method.
func (m *MockClient) NextAvailableIPRangeAddress(arg0 context.Context) (*ipaddr.IPAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextAvailableIPRangeAddress", arg0)
	ret0, _ := ret[0].(*ipaddr.IPAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextAvailableIPRangeAddress indicates an expected call of NextAvailableIPRangeAddress.
func (mr *MockClientMockRecorder) NextAvailableIPRangeAddress(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextAvailableIPRangeAddress", reflect.TypeOf((*MockClient)(nil).NextAvailableIPRangeAddress), arg0)
}

// NextAvailablePrefixAddress mocks base method.
func (m *MockClient) NextAvailablePrefixAddress(arg0 context.Context) (*ipaddr.IPAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextAvailablePrefixAddress", arg0)
	ret0, _ := ret[0].(*ipaddr.IPAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextAvailablePrefixAddress indicates an expected call of NextAvailablePrefixAddress.
func (mr *MockClientMockRecorder) NextAvailablePrefixAddress(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextAvailablePrefixAddress", reflect.TypeOf((*MockClient)(nil).NextAvailablePrefixAddress), arg0)
}
